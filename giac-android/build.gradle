buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
    }
}

plugins {
  id "com.github.dcendents.android-maven" version "2.1"
}

apply plugin: 'com.android.library'

configurations {
       deployerAar
}

artifacts {
    deployerAar file("${buildDir}/outputs/aar/${project.name}-release.aar")
}

dependencies {
    deployerAar 'org.apache.maven.wagon:wagon-ssh:3.3.2'
}

android {
    compileSdkVersion 27
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 27
    }
}

def jniLibsDir = "src/main/jniLibs"
def abiSplits = ["armeabi-v7a": "/../arm-linux-androideabi/lib/",
                 "x86"        : "/../i686-linux-android/lib/",
                 "x86_64"     : "/../x86_64-linux-android/lib/",
                 "arm64-v8a"  : "/../aarch64-linux-android/lib/"]

task copyCrystaxSo {
    group 'android'
    description 'Copies Crystax .so files to the appropriate folders.'
    doLast {
        def so = "libcrystax.so"
        def missing = abiSplits.size()
        def PATH = System.env['PATH'].split(":").each { d ->
            abiSplits.each { arch, libDirSuffix ->
                def libdirArch = d + libDirSuffix 
                if (file(libdirArch + so).exists()) {
                    println " Found $arch .so in $d"
                    missing --
                    copy { from libdirArch include so into "$jniLibsDir/$arch" }
                }
            }
        }
        if (missing > 0) {
            throw new GradleException("Missing $missing $so libraries, check PATH")
        }
    }
}

uploadDeployerAar { task ->
        gradle.taskGraph.whenReady { graph ->
            if (graph.hasTask(task)) {
                // check properties defined and fail early
                mavenUser
                mavenPassword
                mavenUrl
            }
        }
        doFirst {
            repositories {
                mavenDeployer {
                        configuration = configurations.deployerAar
                    repository(url: mavenUrl) {
                        authentication(userName: mavenUser, password: mavenPassword)
                    }
                    pom {
                        artifactId = project.name
                        packaging = 'aar'
                    }
                }
            }
        }
    }
