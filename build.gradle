project.setDescription('Giac CAS for GeoGebra')

apply plugin: 'cpp'

def java_home = org.gradle.internal.jvm.Jvm.current().javaHome

// println java_home

model {
    repositories {
        libs(PrebuiltLibraries) {
            mpfr {
                binaries.withType(StaticLibraryBinary) {
		    def arch = targetPlatform.architecture.name
		    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libmpfr.a")
            	    }
    		}
            gmp {
                binaries.withType(StaticLibraryBinary) {
		    def arch = targetPlatform.architecture.name
		    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libgmp.a")
            	    }
        	}
    	    }
	}

    platforms {
        win32 {
            architecture 'i386'
            operatingSystem 'windows'
    	    }
        win64 {
            architecture 'x64'
            operatingSystem 'windows'
    	    }
	linux_i686 { // this will be fixed in Gradle 2.4 (-> linux32)
            architecture 'i386'
            operatingSystem 'linux'
    	    }
	linux64 {
            architecture 'x64'
            operatingSystem 'linux'
    	    }
        osx_amd64 {
            architecture 'amd64'
            operatingSystem 'osx'
	    }
	}

    toolChains {
        mingw(Gcc) {
            target('win32') {
                cppCompiler.executable 'i686-w64-mingw32-g++'
                linker.executable 'i686-w64-mingw32-g++'
        	}
            target('win64') {
                cppCompiler.executable 'x86_64-w64-mingw32-g++'
                linker.executable 'x86_64-w64-mingw32-g++'
        	}
    	    }
        clang(Clang) {
            target('osx_amd64') {
                cppCompiler.executable 'clang'
                linker.executable 'gcc'
        	}
    	    }
	}
    components {
        // giac static libary
        giac(NativeLibrarySpec) {
            binaries.all{ 
                cppCompiler.define "GIAC_GGB"
                cppCompiler.define "IN_GIAC"
                cppCompiler.define "GIAC_GENERIC_CONSTANTS"
                cppCompiler.define "HAVE_UNISTD_H"
                cppCompiler.define "HAVE_LIBPTHREAD"
                cppCompiler.define "HAVE_SYSCONF"
                cppCompiler.define "HAVE_NO_HOME_DIRECTORY"
                cppCompiler.define "VERSION", '"1.1.3"'
                cppCompiler.define "TIMEOUT"
        	}
    	    }

        icas(NativeExecutableSpec) {
            binaries.all {
                lib library: 'giac', linkage: 'static'
                linker.args '-lgmp', '-lpthread'
        	}
    	    }

        javagiac(NativeLibrarySpec) {
            targetPlatform 'win32'
            targetPlatform 'win64'
	    targetPlatform 'linux_i686' // this will be fixed in Gradle 2.4 (-> linux32)
	    targetPlatform 'linux64'
	    targetPlatform 'osx_amd64'

            sources.cpp {
                source {
                    srcDirs 'src/giac/cpp', 'src/jni/cpp'
                    exclude '**/first.cc', '**/firstcc.cc', '**/hello.cc' // consider removing them from SVN
            	    }
                exportedHeaders {
                    srcDirs 'src/giac/headers', 'src/jni/jdkHeaders'
            	    }
                lib library: 'mpfr', linkage: 'static'
                lib library: 'gmp', linkage: 'static'
        	}

            binaries.withType(SharedLibraryBinary) {
		// Common settings for all platforms and architectures:
                cppCompiler.define 'IN_GIAC'
                cppCompiler.define 'GIAC_GENERIC_CONSTANTS'
		// Additional settings can be defined in config.h.
		// They are automatically loaded if HAVE_CONFIG_H is defined below:
                cppCompiler.define 'HAVE_CONFIG_H'

                cppCompiler.args '-fexceptions'
                cppCompiler.args '-Os' // size optimization
                cppCompiler.args '-I.'

                linker.args "-I${java_home}/include", "-Isrc/jni/jdkHeaders"

		// Architecture based settings:
                if (targetPlatform.architecture.name == 'i386') {
                    cppCompiler.define 'SMARTPTR64'
                    cppCompiler.define 'SIZEOF_LONG', '8'
            	    } else {
                    cppCompiler.define 'SIZEOF_LONG', '4'
            	    }

		// OS based settings:
                if (targetPlatform.operatingSystem.name == 'windows') {
                    cppCompiler.define 'GIAC_MPQS'
                    cppCompiler.define '__MINGW_H'
                    cppCompiler.define 'HAVE_NO_SYS_TIMES_H'
                    cppCompiler.define 'HAVE_NO_SYS_RESOURCE_WAIT_H'
                    cppCompiler.define 'HAVE_NO_PWD_H'
                    cppCompiler.define 'HAVE_NO_CWD'
                    cppCompiler.define 'usleep',''
                    cppCompiler.define 'YY_NO_UNISTD_H'

		    cppCompiler.args '-I', file('src/jni/jdkHeaders/win32').toString()
		    // Insert prebuilt libraries
            	    linker.args '-Wl,--add-stdcall-alias'
            	    linker.args '-s' // stripping

		    // Add libgcc and libstdc++ statically
		    linker.args '-static-libgcc'
		    linker.args '-static-libstdc++'
            	    
		    }

                if (targetPlatform.operatingSystem.name == 'linux') {
                    cppCompiler.define 'HAVE_UNISTD_H'

		    cppCompiler.args '-I', file('src/jni/jdkHeaders/linux').toString()
		    cppCompiler.args '-fno-strict-aliasing' // maybe not needed
		    cppCompiler.args '-DPIC' // maybe not needed
		    
		    linker.args '-s' // stripping

		    // Add libgcc and libstdc++ statically
		    linker.args '-static-libgcc'
		    linker.args '-static-libstdc++'


            	    }
            	    
                if (targetPlatform.operatingSystem.name == 'osx') {
                    cppCompiler.define 'HAVE_UNISTD_H'
                    cppCompiler.define 'APPLE_SMART'
            	    cppCompiler.define 'NO_SCANDIR'
            	    cppCompiler.define 'gettext', ''
            	    cppCompiler.args '-mmacosx-version-min=10.6'
            	    cppCompiler.args '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk'
            	    cppCompiler.args '-I/System/Library/Frameworks/CoreFoundation.framework/Headers'

		    cppCompiler.args '-I', file('src/jni/jdkHeaders/darwin').toString()

		    linker.args '-Wl,-search_paths_first'
		    linker.args '-L', file('src/jni/prebuilt/osx/x86-64').toString()

		    linker.args '-stdlib=libstdc++', '-lstdc++'
		    linker.args '-lgmp', '-lmpfr', '-lpthread', '-dynamiclib'
		    linker.args '-framework', 'Accelerate'
		    linker.args '-framework', 'CoreFoundation'
		    }
        	}
    	    }
	}
    }

task run (dependsOn: 'icasExecutable', type: Exec) {
    description "Runs Giac's icas terminal"
    commandLine 'build/binaries/icasExecutable/icas'
    standardInput = System.in
    }
