// Gradle script to build Giac embedded for GeoGebra.
// Authors: Balazs Bencze <balazs.bencze@geogebra.org>,
// and Zoltan Kovacs <zoltan@geogebra.org>.
// Based on Bernard Parisse's original Makefiles and other scripts.

project.setDescription('Giac CAS for GeoGebra')

apply plugin: 'cpp'

// FIXME: These seetings are hardcoded at the moment, they need to be more general.
// Set this as needed:
def externalSourceDir = "/home/autotest/gmp+mpfr-llvm"
// You may need to download and unzip following packages:
def gmpSourceDir = "$externalSourceDir/gmp-6.0.0"
def mpfrSourceDir = "$externalSourceDir/mpfr-3.1.2"
def emgiacSourceDir = "$externalSourceDir/emgiac"

def java_home = org.gradle.internal.jvm.Jvm.current().javaHome

def emccCommand = "emcc"
// You may override it by using environmental variable:
if (System.env['EMCC'] != null) {
    emccCommand = System.env['EMCC']
    }
// Also consider setting LLVM for the older emscripten version.
// Emscripten should be configured before running this script, and on the first run there may be problems.

def jsPrebuiltDir = "src/giac.js/prebuilt"
def LlvmMpfrA = "$jsPrebuiltDir/libmpfr.a"
def LlvmGmpA = "$jsPrebuiltDir/libgmp.a"
if (System.env['EXT_GMPMPFR'] != null && System.env['EXT_GMPMPFR'] == "local") {
    LlvmMpfrA = "$mpfrSourceDir/src/.libs/libmpfr.a"
    LlvmGmpA = "$gmpSourceDir/.libs/libgmp.a"
    }
if (System.env['EXT_GMPMPFR'] != null && System.env['EXT_GMPMPFR'] == "emgiac") {
    LlvmMpfrA = "$emgiacSourceDir/giac/libmpfr.a"
    LlvmGmpA = "$emgiacSourceDir/giac/libgmp.a"
    }
def emscriptenVer = '201304'
if (System.env['EMSCRIPTEN_VER'] != null && System.env['EMSCRIPTEN_VER'] == "201505") {
    emscriptenVer = '201505'
    }

def emsdkUrlFolder = 'https://s3.amazonaws.com/mozilla-games/emscripten/releases'
def emsdkTgzFile = 'emsdk-portable.tar.gz'
def emsdkDir = file('build/emsdk')
def emsdkRunDir = file("$emsdkDir/emsdk_portable")
def emscriptenDir = file("$emsdkRunDir/emscripten/1.30.0")

model {
    repositories {
        libs(PrebuiltLibraries) {
            mpfr {
                binaries.withType(StaticLibraryBinary) {
                    def arch = targetPlatform.architecture.name
                    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libmpfr.a")
            	}
    		}
            gmp {
                binaries.withType(StaticLibraryBinary) {
	                def arch = targetPlatform.architecture.name
                    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libgmp.a")
                }
        	}
    	}
	}

    platforms {
        win32 {
            architecture 'i386'
            operatingSystem 'windows'
        }
        win64 {
            architecture 'x64'
            operatingSystem 'windows'
    	}
        linux_i686 { // this will be fixed in Gradle 2.4 (-> linux32)
            architecture 'i386'
            operatingSystem 'linux'
        }
        linux64 {
            architecture 'x64'
            operatingSystem 'linux'
        }
        osx_amd64 {
            architecture 'amd64'
            operatingSystem 'osx'
	    }
        androideabi {
            architecture 'armeabi'
            operatingSystem 'android'
        }
	}

    toolChains {
        mingw(Gcc) {
            target('win32') {
                cppCompiler.executable 'i686-w64-mingw32-g++'
                linker.executable 'i686-w64-mingw32-g++'
        	}
            target('win64') {
                cppCompiler.executable 'x86_64-w64-mingw32-g++'
                linker.executable 'x86_64-w64-mingw32-g++'
        	}
        }
        clang(Clang) {
            target('osx_amd64') {
                cppCompiler.executable 'clang'
                linker.executable 'gcc'
        	}
    	}
        android(Gcc) {
            target('androideabi') {
                cppCompiler.executable 'arm-linux-androideabi-g++'
                linker.executable 'arm-linux-androideabi-g++'
            }
        }
	}
    components {
        // giac static libary
        giac(NativeLibrarySpec) {
            binaries.all { 
                cppCompiler.define "GIAC_GGB"
                cppCompiler.define "IN_GIAC"
                cppCompiler.define "GIAC_GENERIC_CONSTANTS"
                cppCompiler.define "HAVE_UNISTD_H"
                cppCompiler.define "HAVE_LIBPTHREAD"
                cppCompiler.define "HAVE_SYSCONF"
                cppCompiler.define "HAVE_NO_HOME_DIRECTORY"
                cppCompiler.define "VERSION", '"1.1.3"'
                cppCompiler.define "TIMEOUT"
        	}
        }

        icas(NativeExecutableSpec) {
            binaries.all {
                lib library: 'giac', linkage: 'static'
                linker.args '-lgmp', '-lpthread'
        	}
        }

        javagiac(NativeLibrarySpec) {
            targetPlatform 'win32'
            targetPlatform 'win64'
            targetPlatform 'linux_i686' // this will be fixed in Gradle 2.4 (-> linux32)
            targetPlatform 'linux64'
            targetPlatform 'osx_amd64'

            sources.cpp {
                source {
                    srcDirs 'src/giac/cpp', 'src/jni/cpp'
                    exclude '**/first.cc', '**/firstcc.cc', '**/hello.cc', // consider removing them from SVN
                        '**/freeglut*.c*', '**/opengl.cc'
            	}
                exportedHeaders {
                    srcDirs 'src/giac/headers', 'src/jni/jdkHeaders'
            	}
                lib library: 'mpfr', linkage: 'static'
                lib library: 'gmp', linkage: 'static'
        	}

            binaries.withType(SharedLibraryBinary) {
                // Common settings for all platforms and architectures:
                cppCompiler.define 'IN_GIAC'
                cppCompiler.define 'GIAC_GENERIC_CONSTANTS'
                // Additional settings can be defined in config.h.
                // They are automatically loaded if HAVE_CONFIG_H is defined below:
                cppCompiler.define 'HAVE_CONFIG_H'

                cppCompiler.args '-fexceptions'
                // cppCompiler.args '-Os' // size optimization
                cppCompiler.args '-O2' // standard optimization (default)
                cppCompiler.args '-I.'

                linker.args "-I${java_home}/include", "-Isrc/jni/jdkHeaders"

                // Architecture based settings:
                if (targetPlatform.architecture.name == 'i386') {
                    cppCompiler.define 'SMARTPTR64'
                    cppCompiler.define 'SIZEOF_LONG', '8'
            	} else {
                    cppCompiler.define 'SIZEOF_LONG', '4'
            	}

                // OS based settings:
                if (targetPlatform.operatingSystem.name == 'windows') {
                    cppCompiler.define 'GIAC_MPQS'
                    cppCompiler.define '__MINGW_H'
                    cppCompiler.define 'HAVE_NO_SYS_TIMES_H'
                    cppCompiler.define 'HAVE_NO_SYS_RESOURCE_WAIT_H'
                    cppCompiler.define 'HAVE_NO_PWD_H'
                    cppCompiler.define 'HAVE_NO_CWD'
                    cppCompiler.define 'usleep',''
                    cppCompiler.define 'YY_NO_UNISTD_H'

                    // This can be done to reduce size, but not necessary
                    // if (targetPlatform.architecture.name == 'i386') {
                    //	cppCompiler.args '-UHAVE_PTHREAD_H'
                    //	}

                    cppCompiler.args '-I', file('src/jni/jdkHeaders/win32').toString()
                    // Insert prebuilt libraries
            	    linker.args '-Wl,--add-stdcall-alias'
            	    linker.args '-s' // stripping

                    // Add libgcc and libstdc++ statically
                    linker.args '-static-libgcc'
                    linker.args '-static-libstdc++'
                    // Statically link libpthread
                    // linker.args '-Wl,-Bstatic', '-lstdc++', '-lpthread'
                    // Or even better, everything
                    linker.args '-static'
                }

                if (targetPlatform.operatingSystem.name == 'linux') {
                    cppCompiler.define 'HAVE_UNISTD_H'

                    cppCompiler.args '-I', file('src/jni/jdkHeaders/linux').toString()
                    cppCompiler.args '-fno-strict-aliasing' // maybe not needed
                    cppCompiler.args '-DPIC' // maybe not needed

                    linker.args '-s' // stripping

                    // Add libgcc and libstdc++ statically
                    linker.args '-static-libgcc'
                    linker.args '-static-libstdc++'

            	}

                if (targetPlatform.operatingSystem.name == 'osx') {
                    cppCompiler.define 'HAVE_UNISTD_H'
                    cppCompiler.define 'APPLE_SMART'
            	    cppCompiler.define 'NO_SCANDIR'
            	    cppCompiler.define 'gettext', ''
            	    cppCompiler.args '-mmacosx-version-min=10.6'
            	    cppCompiler.args '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk'
            	    cppCompiler.args '-I/System/Library/Frameworks/CoreFoundation.framework/Headers'

                    cppCompiler.args '-I', file('src/jni/jdkHeaders/darwin').toString()

                    linker.args '-Wl,-search_paths_first'
                    linker.args '-L', file('src/jni/prebuilt/osx/x86-64').toString()

                    linker.args '-stdlib=libstdc++', '-lstdc++'
                    linker.args '-lgmp', '-lmpfr', '-lpthread', '-dynamiclib'
                    linker.args '-framework', 'Accelerate'
                    linker.args '-framework', 'CoreFoundation'
                    linker.args '-o', 'build/binaries/javagiacSharedLibrary/osx_amd64/libjavagiac.jnilib' // TODO: find a more elegant way
                }
            }
        }
    }
}

task run (dependsOn: 'icasExecutable', type: Exec) {
    description "Runs Giac's icas terminal"
    commandLine 'build/binaries/icasExecutable/icas'
    standardInput = System.in
    }

tasks.addRule("Pattern: emccCompile_<FILE>Cc: Compile <FILE>.cc into <FILE>.o.") { String taskName ->
    if ((taskName.startsWith('emccCompile_')) && (taskName.endsWith('Cc'))) {
	def basename = (taskName - 'Cc').substring('emccCompile_'.length())
        task(taskName) {
	    def input = "src/giac/cpp/${basename}.cc"
	    inputs.file input
	    def output = "build/objs/giac.js/${basename}.o"
	    outputs.file output
	    doLast {
		file("build/objs/giac.js").mkdirs()
		exec {
		    // Be very careful when changing this: config.h also contains some entries! 
		    def specialOptions = ''
		    def commandline = emccCommand
		    commandline += ' -DIN_GIAC -DGIAC_GENERIC_CONSTANTS -DNO_STDEXCEPT -DHAVE_CONFIG_H' // from old Makefile
		    if (emscriptenVer == '201304') {
			commandline += " -s PRECISE_I32_MUL=1" // from old Makefile (PREC)
			}
		    if (emscriptenVer == '201505') {
			commandline += " -Dgammaf=tgammaf -s ALLOW_MEMORY_GROWTH=1 -fno-exceptions"
			}

		    commandline += ' -DGIAC_GGB' // from old Makefile
		    commandline += ' -DTIMEOUT -DEMCC' // from old config.h
		    commandline += " -Isrc/giac/headers -c $input -o $output"

		    commandLine commandline.split()
		    }
		}
	    }
	}
    }

task emccClean(type: Delete) {
    description 'Deletes .o files and linked giac*.js for cleaning up.'
    delete 'build/objs/giac.js', 'build/binaries/giacggb.js'
    }

task emccCompile {
    description 'Creates .o files for giac.js.'
    def list = []
    FileTree files = fileTree(dir: 'src/giac/cpp')
    files.visit { f ->
	if (f.name.endsWith('.cc') && !f.name.startsWith("first") && !f.name.startsWith("hello") && !f.name.startsWith("opengl")) {
    	    def emccCompileTask = 'emccCompile_' + f.name - '.cc' + 'Cc'
	    list << emccCompileTask
	    }
	}
    dependsOn list
    }

task emccGiacJs (dependsOn: 'emccCompile') {
    description 'Links giac.js.'
    def list = []
    def linkerArgs = []
    def inputInclude = []
    FileTree files = fileTree(dir: 'build/objs/giac.js')
    files.visit { f ->
	if (!f.name.startsWith("first") && !f.name.startsWith("hello") && !f.name.startsWith("opengl")) { // consider completely removing first*.cc and hello.cc
    	    def emccCompileTask = 'emccCompile_' + f.name - '.o' + 'Cc'
	    inputInclude << f.name
	    inputInclude << ('src/giac/cpp/' + f.name - '.o' + '.cc')
	    list << emccCompileTask
	    linkerArgs << "build/objs/giac.js/${f.name}"
	    }
	}
    def output = "build/binaries/giacggb.js/giacggb.js"
    inputs.files inputInclude
    outputs.file output
    mustRunAfter emccCompile
    doLast {
	file("build/binaries/giacggb.js").mkdirs()
	exec {
	    linkerArgs << LlvmMpfrA // mpfr must precede gmp, see http://www.mpfr.org/faq.html, Q5
	    linkerArgs << LlvmGmpA
	    linkerArgs << '--js-library' << 'src/giac.js/js/time.js'
	    if (emscriptenVer == '201304') {
    	        linkerArgs << '-s' << 'PRECISE_I32_MUL=1'
		}
	    if (emscriptenVer == '201505') {
		linkerArgs << '-s' << 'ALLOW_MEMORY_GROWTH=1'
    	        // linkerArgs << '-s' << 'PRECISE_I64_MATH=1'
		}
	    linkerArgs << '-DGIAC_GGB'
	    linkerArgs << '-o' << output
	    linkerArgs << '-O2' << '-v' << '-s' << "EXPORTED_FUNCTIONS=['__ZN4giac7casevalEPKc']"
	    linkerArgs << '--closure' << '1'
	    commandLine emccCommand
	    args linkerArgs
	    }
	}
    }

task createGiacGgbJs(dependsOn: 'emccGiacJs', type: Copy) {
    description 'Creates the giacggb.js folder to store embeddable giac.js.'
    from 'src/giac.js'
    into 'build/binaries/giacggb.js'
    include ('ggb.html')
    }

task createGiacJs(dependsOn: 'createGiacGgbJs', type: Copy) {
    description 'Creates JavaScript version of Giac which can be embedded into GeoGebraWeb.'
    from 'build/binaries/giacggb.js'
    into 'build/binaries/giacggb.js'
    include ('giacggb.js')
    rename 'giacggb.js', 'giac.js'
    filter { line -> line.replace('Module', '__ggb__giac') }
    }

// Using emsdk

task downloadEmsdk {
    description 'Downloads emscripten SDK and downloads it.'
    outputs.dir emsdkDir
    doLast {
        emsdkDir.mkdirs()
	ant.get(src: "$emsdkUrlFolder/$emsdkTgzFile", dest: emsdkDir,
	    skipexisting: true, usetimestamp: true)
	copy {
	    from tarTree("$emsdkDir/$emsdkTgzFile")
	    into "$emsdkDir"
	    }
	}
    }

task installEmsdk (dependsOn: 'downloadEmsdk') {
    description 'Installs/updates the emscripten SDK.'
    doLast {
	exec {
	    commandLine './emsdk update'.split()
	    workingDir emsdkRunDir
	    }
	exec {
	    commandLine './emsdk install latest'.split()
	    workingDir emsdkRunDir
	    }
	exec {
	    commandLine './emsdk activate latest'.split()
	    workingDir emsdkRunDir
	    }
	// "nodejs" must be set in ~/.emscripten under Ubuntu 14.10
	}
    }

task emConfigureGmp {
    description 'Configures GMP for the emscripten SDK.'
    doLast {
	exec {
	    commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; $emscriptenDir/emconfigure $gmpSourceDir/configure --build=none --host=none --disable-assembly"
	    workingDir gmpSourceDir
	    }
	}
    }

task emMakeGmp {
    description 'Makes GMP with the emscripten SDK.'
    doLast {
	exec {
	    commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; $emscriptenDir/emmake make"
	    workingDir gmpSourceDir
	    }
	}
    }

task emConfigureMpfr {
    description 'Configures MPFR for the emscripten SDK.'
    doLast {
	exec {
	    commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; " +
		"$emscriptenDir/emconfigure $mpfrSourceDir/configure --build=none --host=none --disable-assembly " +
		"--with-gmp-lib=$gmpSourceDir/.libs --with-gmp-include=$gmpSourceDir"
	    workingDir mpfrSourceDir
	    }
	}
    }

task emMakeMpfr {
    description 'Makes MPFR with the emscripten SDK.'
    doLast {
	exec {
	    commandLine 'bash', '-c', "source $emsdkRunDir/emsdk_env.sh; $emscriptenDir/emmake make"
	    workingDir mpfrSourceDir
	    }
	}
    }

/* How to use the new system:
 * Run tasks downloadEmsdk, installEmsdk, emConfigureGmp, emMakeGmp, emConfigureMpfr, emMakeMpfr, then run
 * $ EMSCRIPTEN_VER=201505 EXT_GMPMPFR=emgiac EMCC=$HOME/geogebra/giac/build/emsdk/emsdk_portable/emscripten/master/emcc ../gradlew createGiacJs
 */
