project.setDescription('Giac CAS for GeoGebra')

apply plugin: 'cpp'

def java_home = org.gradle.internal.jvm.Jvm.current().javaHome

def emccCommand = "emcc"
// You may override it by using environmental variable:
if (System.env['EMCC'] != null) {
    emccCommand = System.env['EMCC']
    }
// Emscripten should be configured before running this script.
// FIXME: Not all version of Emscripten will work, or at least not automagically.

model {
    repositories {
        libs(PrebuiltLibraries) {
            mpfr {
                binaries.withType(StaticLibraryBinary) {
		    def arch = targetPlatform.architecture.name
		    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libmpfr.a")
            	    }
    		}
            gmp {
                binaries.withType(StaticLibraryBinary) {
		    def arch = targetPlatform.architecture.name
		    def os = targetPlatform.operatingSystem.name
                    staticLibraryFile = file("src/jni/prebuilt/$os/$arch/libgmp.a")
            	    }
        	}
    	    }
	}

    platforms {
        win32 {
            architecture 'i386'
            operatingSystem 'windows'
    	    }
        win64 {
            architecture 'x64'
            operatingSystem 'windows'
    	    }
	linux_i686 { // this will be fixed in Gradle 2.4 (-> linux32)
            architecture 'i386'
            operatingSystem 'linux'
    	    }
	linux64 {
            architecture 'x64'
            operatingSystem 'linux'
    	    }
        osx_amd64 {
            architecture 'amd64'
            operatingSystem 'osx'
	    }
	}

    toolChains {
        mingw(Gcc) {
            target('win32') {
                cppCompiler.executable 'i686-w64-mingw32-g++'
                linker.executable 'i686-w64-mingw32-g++'
        	}
            target('win64') {
                cppCompiler.executable 'x86_64-w64-mingw32-g++'
                linker.executable 'x86_64-w64-mingw32-g++'
        	}
    	    }
        clang(Clang) {
            target('osx_amd64') {
                cppCompiler.executable 'clang'
                linker.executable 'gcc'
        	}
    	    }
	}
    components {
        // giac static libary
        giac(NativeLibrarySpec) {
            binaries.all{ 
                cppCompiler.define "GIAC_GGB"
                cppCompiler.define "IN_GIAC"
                cppCompiler.define "GIAC_GENERIC_CONSTANTS"
                cppCompiler.define "HAVE_UNISTD_H"
                cppCompiler.define "HAVE_LIBPTHREAD"
                cppCompiler.define "HAVE_SYSCONF"
                cppCompiler.define "HAVE_NO_HOME_DIRECTORY"
                cppCompiler.define "VERSION", '"1.1.3"'
                cppCompiler.define "TIMEOUT"
        	}
    	    }

        icas(NativeExecutableSpec) {
            binaries.all {
                lib library: 'giac', linkage: 'static'
                linker.args '-lgmp', '-lpthread'
        	}
    	    }

        javagiac(NativeLibrarySpec) {
            targetPlatform 'win32'
            targetPlatform 'win64'
	    targetPlatform 'linux_i686' // this will be fixed in Gradle 2.4 (-> linux32)
	    targetPlatform 'linux64'
	    targetPlatform 'osx_amd64'

            sources.cpp {
                source {
                    srcDirs 'src/giac/cpp', 'src/jni/cpp'
                    exclude '**/first.cc', '**/firstcc.cc', '**/hello.cc' // consider removing them from SVN
            	    }
                exportedHeaders {
                    srcDirs 'src/giac/headers', 'src/jni/jdkHeaders'
            	    }
                lib library: 'mpfr', linkage: 'static'
                lib library: 'gmp', linkage: 'static'
        	}

            binaries.withType(SharedLibraryBinary) {
		// Common settings for all platforms and architectures:
                cppCompiler.define 'IN_GIAC'
                cppCompiler.define 'GIAC_GENERIC_CONSTANTS'
		// Additional settings can be defined in config.h.
		// They are automatically loaded if HAVE_CONFIG_H is defined below:
                cppCompiler.define 'HAVE_CONFIG_H'

                cppCompiler.args '-fexceptions'
                cppCompiler.args '-Os' // size optimization
                cppCompiler.args '-I.'

                linker.args "-I${java_home}/include", "-Isrc/jni/jdkHeaders"

		// Architecture based settings:
                if (targetPlatform.architecture.name == 'i386') {
                    cppCompiler.define 'SMARTPTR64'
                    cppCompiler.define 'SIZEOF_LONG', '8'
            	    } else {
                    cppCompiler.define 'SIZEOF_LONG', '4'
            	    }

		// OS based settings:
                if (targetPlatform.operatingSystem.name == 'windows') {
                    cppCompiler.define 'GIAC_MPQS'
                    cppCompiler.define '__MINGW_H'
                    cppCompiler.define 'HAVE_NO_SYS_TIMES_H'
                    cppCompiler.define 'HAVE_NO_SYS_RESOURCE_WAIT_H'
                    cppCompiler.define 'HAVE_NO_PWD_H'
                    cppCompiler.define 'HAVE_NO_CWD'
                    cppCompiler.define 'usleep',''
                    cppCompiler.define 'YY_NO_UNISTD_H'

		    cppCompiler.args '-I', file('src/jni/jdkHeaders/win32').toString()
		    // Insert prebuilt libraries
            	    linker.args '-Wl,--add-stdcall-alias'
            	    linker.args '-s' // stripping

		    // Add libgcc and libstdc++ statically
		    linker.args '-static-libgcc'
		    linker.args '-static-libstdc++'
            	    
		    }

                if (targetPlatform.operatingSystem.name == 'linux') {
                    cppCompiler.define 'HAVE_UNISTD_H'

		    cppCompiler.args '-I', file('src/jni/jdkHeaders/linux').toString()
		    cppCompiler.args '-fno-strict-aliasing' // maybe not needed
		    cppCompiler.args '-DPIC' // maybe not needed

		    linker.args '-s' // stripping

		    // Add libgcc and libstdc++ statically
		    linker.args '-static-libgcc'
		    linker.args '-static-libstdc++'

            	    }

                if (targetPlatform.operatingSystem.name == 'osx') {
                    cppCompiler.define 'HAVE_UNISTD_H'
                    cppCompiler.define 'APPLE_SMART'
            	    cppCompiler.define 'NO_SCANDIR'
            	    cppCompiler.define 'gettext', ''
            	    cppCompiler.args '-mmacosx-version-min=10.6'
            	    cppCompiler.args '-isysroot', '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk'
            	    cppCompiler.args '-I/System/Library/Frameworks/CoreFoundation.framework/Headers'

		    cppCompiler.args '-I', file('src/jni/jdkHeaders/darwin').toString()

		    linker.args '-Wl,-search_paths_first'
		    linker.args '-L', file('src/jni/prebuilt/osx/x86-64').toString()

		    linker.args '-stdlib=libstdc++', '-lstdc++'
		    linker.args '-lgmp', '-lmpfr', '-lpthread', '-dynamiclib'
		    linker.args '-framework', 'Accelerate'
		    linker.args '-framework', 'CoreFoundation'
		    }
        	}
    	    }
	}
    }

task run (dependsOn: 'icasExecutable', type: Exec) {
    description "Runs Giac's icas terminal"
    commandLine 'build/binaries/icasExecutable/icas'
    standardInput = System.in
    }


tasks.addRule("Pattern: emccCompile_<FILE>Cc: Compile <FILE>.cc into <FILE>.o.") { String taskName ->
    if ((taskName.startsWith('emccCompile_')) && (taskName.endsWith('Cc'))) {
	def basename = (taskName - 'Cc').substring('emccCompile_'.length())
        task(taskName) {
	    def input = "src/giac/cpp/${basename}.cc"
	    inputs.file input
	    def output = "build/objs/giac.js/${basename}.o"
	    outputs.file output
	    doLast {
		file("build/objs/giac.js").mkdirs()
		exec {
		    // Be very careful when changing this: config.h also contains some entries! 
		    commandLine emccCommand,
			'-DIN_GIAC', '-DGIAC_GENERIC_CONSTANTS', '-DNO_STDEXCEPT', '-DHAVE_CONFIG_H', // from old Makefile
			'-s', 'PRECISE_I32_MUL=1', '-DGIAC_GGB', // from old Makefile (PREC)
			'-DTIMEOUT', '-DEMCC', // from old config.h
			'-Isrc/giac/headers', '-c', input, '-o', output
		    }
		}
	    }
	}
    }

task emccCompile {
    def list = []
    FileTree files = fileTree(dir: 'src/giac/cpp')
    files.visit { f ->
	if (f.name.endsWith('.cc')) {
    	    def emccCompileTask = 'emccCompile_' + f.name - '.cc' + 'Cc'
	    list << emccCompileTask
	    }
	}
    dependsOn list
    }

task emccGiacJs (dependsOn: 'emccCompile') {
    def list = []
    def linkerArgs = []
    def inputInclude = []
    FileTree files = fileTree(dir: 'build/objs/giac.js')
    files.visit { f ->
	if (!f.name.startsWith("first") && !f.name.startsWith("hello")) { // consider completely removing first*.cc and hello.cc
    	    def emccCompileTask = 'emccCompile_' + f.name - '.o' + 'Cc'
	    inputInclude << f.name
	    list << emccCompileTask
	    linkerArgs << "build/objs/giac.js/${f.name}"
	    }
	}
    def output = "build/binaries/giacggb.js/giacggb.js"
    inputs.files inputInclude
    outputs.file output
    doLast {
	file("build/binaries/giacggb.js").mkdirs()
	exec {
	    linkerArgs << "src/giac.js/prebuilt/libmpfr.a" // mpfr must precede gmp, see http://www.mpfr.org/faq.html, Q5
	    linkerArgs << "src/giac.js/prebuilt/libgmp.a"
	    linkerArgs << '-s' << 'PRECISE_I32_MUL=1' << '-DGIAC_GGB'
	    linkerArgs << '-o' << output
	    linkerArgs << '-O2' << '-v' << '-s' << "EXPORTED_FUNCTIONS=['__ZN4giac7casevalEPKc']"
	    linkerArgs << '--closure' << '1'
	    commandLine emccCommand
	    args linkerArgs
	    }
	}
    }

task createGiacGgbJs(dependsOn: 'emccGiacJs', type: Copy) {
    from 'src/giac.js'
    into 'build/binaries/giacggb.js'
    include ('ggb.html')
    }

task createGiacJs(dependsOn: 'createGiacGgbJs', type: Copy) {
    from 'build/binaries/giacggb.js'
    into 'build/binaries/giacggb.js'
    include ('giacggb.js')
    rename 'giacggb.js', 'giac.js'
    filter { line -> line.replace('Module', '__ggb__giac') }
    }
